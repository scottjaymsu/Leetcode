'''
Given a directed Graph, the task is to perform Depth First Search of the given graph.

Note: Start DFS from node 0, and traverse the nodes in the same order as adjacency list.


Example 1:
Input: adj =  [[1, 2], [0, 2], [0, 1, 3, 4], [2], [2]]
Output: [0 1 2 3 4]
Explanation:  The source vertex s is 0. We visit it first, then we visit an adjacent. 
Start at 0: Mark as visited. Output: 0
Move to 1: Mark as visited. Output: 1 
Move to 2: Mark as visited. Output: 2 
Move to 3: Mark as visited. Output: 3 (backtrack to 2)
Move to 4: Mark as visited. Output: 4 (backtrack to 2, then backtrack to 1, then to 0)

Not that there can be more than one DFS Traversals of a Graph. For example, after 1, we may pick adjacent 2 instead of 0 and get a different DFS. Here we pick in the insertion order

Example 2:
Input: [[2,3,1], [0], [0,4], [0], [2]]

Output: [0 2 4 3 1]
Explanation: DFS Steps:

Start at 0: Mark as visited. Output: 0
Move to 2: Mark as visited. Output: 2
Move to 4: Mark as visited. Output: 4 (backtrack to 2, then backtrack to 0)
Move to 3: Mark as visited. Output: 3 (backtrack to 0)
Move to 1: Mark as visited. Output: 1 (backtrack to 0)
'''


def main(adj):
    n = len(adj)   
    visited = []
    
    def dfs(adj, visited, i):
        visited.append(i) #< mark node as visited
        for j in adj[i]: #< search all nodes connected
            if j not in visited: #< search connected node that hasn't been visted yet
                dfs(adj, visited, j)
      
    dfs(adj, visited, 0)
    return visited

print(main([[1, 2], [0, 2], [0, 1, 3, 4], [2], [2]]))
print(main([[2,3,1], [0], [0,4], [0], [2]]))
